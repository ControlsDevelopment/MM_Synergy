<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_BaseAxis" Id="{9893d30c-592c-4fbd-8920-f1297d3ded8c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BaseAxis EXTENDS FB_AxisNcBase
VAR_INPUT
	bPowerAxis : BOOL;	// Boolean to turn Power on/off axis
	bJogPositive : BOOL; // Boolean to + Jog
	bJogNegative : BOOL; // Boolean to - Jog
	bStopAxis: BOOL; // Boolean to Stop axis
	bResetAxis: BOOL; // Boolean to Reset axis
	bExecOperationLimits: BOOL; // Boolean to write operation limits of an axis
END_VAR
VAR_OUTPUT
	bBaseFBError : BOOL; // Boolean to check if error exists in Base FB
END_VAR
VAR
	bAllowJogParameters : BOOL; // Boolean to check if jogging is allowed because of parameters
	bAllowJogOperationMode : BOOL; // Boolean to check if jogging is allowed because of operation mode
END_VAR

VAR_INPUT PERSISTENT
	stJogParameters : ST_JogParameters;
	stOperationLimits : ST_OperationLimits;
END_VAR

VAR CONSTANT 
	crJogMinParameter : REAL := 0.0;  // Minimum parameters for jog to be set to 0 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^.Cyclic();						//Cyclic method to initialize underlying motion blocks

IF M_BaseFBError() THEN
;  // Error Exists in Base FB
ELSE  


M_Power(bCommand:= bPowerAxis);  		// Calling of method to turn power on/off

M_Jog(														//Calling of method to jog + or - 
	bCommandJogP:= bJogPositive,bCommandJogM:= bJogNegative, 
	lrJogAccel:= stJogParameters.lrJogAcceleration, 
	lrJogDecel:= stJogParameters.lrJogDeceleration, 
	lrJogJerk:= stJogParameters.lrJogJerkValue, 
	lrJogVelocity:= stJogParameters.lrJogVelocity, 
);

END_IF;

M_Stop(bCommand:= bStopAxis); // Calling of method to stop axis

M_Reset(bCommand:= bResetAxis); // Calling of method to reset axis

M_OperationLimits( // Calling of method to write operation limits of an axis
	bCommand:= bExecOperationLimits, 
	lrSoftMinPos:= stOperationLimits.lrSoftMinPosition , 
	lrSoftMaxPos:= stOperationLimits.lrSoftMaxPosition , 
	lrDefaultAccel:= stOperationLimits.lrDefaultAcceleration , 
	lrDefaultDecel:= stOperationLimits.lrDefaultDeceleration , 
	lrMaxVel:= stOperationLimits.lrMaxVelocity );]]></ST>
    </Implementation>
    <Folder Name="BaseError" Id="{77663557-df21-4da0-aa95-45a90c3d3c00}" />
    <Folder Name="Jog" Id="{ca8a045e-7c45-4cdb-8b7a-c42ae5286175}" />
    <Folder Name="OperationLimits" Id="{e5077341-05c9-42fe-9dfd-2734e8d317c9}" />
    <Folder Name="Power" Id="{3fc8acb5-34a0-417d-a650-9ce1632227e9}" />
    <Folder Name="Reset" Id="{982dba3c-cfd8-4189-b096-7bd40a18341b}" />
    <Folder Name="Stop" Id="{f215a03b-d5db-45d4-afdf-f185e0985756}" />
    <Method Name="M_BaseFBError" Id="{a3bbd40f-558d-4007-8e69-605d725218a9}" FolderPath="BaseError\">
      <Declaration><![CDATA[METHOD M_BaseFBError : BOOL
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
		IF bError THEN
			bBaseFBError := TRUE;			//Set bErrorChk to TRUE so none of the other methods are called
			M_BaseFBError :=TRUE;
		ELSE
			bBaseFBError := FALSE;
			M_BaseFBError :=FALSE;
		END_IF
		
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Jog" Id="{ac6deda1-bf3c-4ebb-acd5-3c584141f03a}" FolderPath="Jog\">
      <Declaration><![CDATA[METHOD M_Jog : HRESULT
VAR_INPUT
	bCommandJogP 	:   BOOL;
	bCommandJogM	:	BOOL;
	lrJogAccel  	:   LREAL;
	lrJogDecel  	:   LREAL;
	lrJogJerk   	:   LREAL;
	lrJogVelocity 	:   LREAL;
	//lrJogTorqueLimitP : LREAL;
END_VAR

VAR 
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ======================================================================

	IF bCommandJogP OR bCommandJogM THEN

		IF M_PreChecks() THEN // Calls to check pre conditions to allow jogging
			F_SucceededHr(Jog.SetParameter(fAcceleration:=lrJogAccel, fDeceleration:=lrJogDecel, // Write jog parameters
				 fJerk:=lrJogJerk,fVelocity:=lrJogVelocity), M_Jog);

					IF bCommandJogP THEN
					 F_SucceededHr(Jog.DoJogP(bExecute:=TRUE),M_Jog);	
					ELSIF bCommandJogM THEN
			 		 F_SucceededHr(Jog.DoJogM(bExecute:=TRUE),M_Jog);
					ELSE
					F_SucceededHr(Jog.DoJogP(bExecute:=FALSE),M_Jog); // Stop the jog when + or - button is released
					F_SucceededHr(Jog.DoJogM(bExecute:=FALSE),M_Jog); 
					END_IF
		ELSE
			F_SucceededHr(Jog.DoJogP(bExecute:=FALSE),M_Jog); // Stop the jog if pre conditions are not met even during motion 
			F_SucceededHr(Jog.DoJogM(bExecute:=FALSE),M_Jog);
		END_IF
	ELSE
			F_SucceededHr(Jog.DoJogP(bExecute:=FALSE),M_Jog); // Stop the jog when its not + or - button  
			F_SucceededHr(Jog.DoJogM(bExecute:=FALSE),M_Jog);
	END_IF		
	
// ======================================================================
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_OperationLimits" Id="{c7e8b8ec-a466-4c2c-8725-bcd964197228}" FolderPath="OperationLimits\">
      <Declaration><![CDATA[METHOD M_OperationLimits : BOOL
VAR_INPUT
	bCommand		:		BOOL;
	lrSoftMinPos	:		LREAL;	//Minimum position of travel allowed
	lrSoftMaxPos	: 		LREAL;	//Maximum position of travel allowed
	lrDefaultAccel	:			LREAL;	//Maximum Acceleration allowed
	lrDefaultDecel	:			LREAL;	//Minimum deceleration allowed
	lrMaxVel	:      		LREAL;  //Maximum Velocity allowed
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bCommand THEN
THIS^.MotionParams.SoftEndMax :=lrSoftMaxPos;
THIS^.MotionParams.SoftEndMin :=lrSoftMinPos;
THIS^.MotionParams.MaxAcceleration:=lrDefaultAccel;
THIS^.MotionParams.MaxDeceleration:=lrDefaultDecel;
THIS^.MotionParams.MaxVeloApplication:=lrMaxVel;
END_IF

 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Power" Id="{e746b7da-cb6b-4d35-af69-904a1282bb02}" FolderPath="Power\">
      <Declaration><![CDATA[METHOD M_Power : HRESULT
VAR_INPUT
	bCommand : BOOL;
END_VAR

VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ======================================================================

	IF bCommand THEN
		IF F_SucceededHr(Power.FeedEnable(bFeedEnaPositive:=TRUE,bFeedEnaNegative:=TRUE), M_Power) THEN
			F_SucceededHr(Power.DoPower(bEnable:=TRUE), M_Power);
		END_IF

	
	ELSIF NOT bCommand THEN
		IF F_SucceededHr(Power.FeedEnable(bFeedEnaPositive:=FALSE,bFeedEnaNegative:=FALSE), M_Power) THEN
			F_SucceededHr(Power.DoPower(bEnable:=FALSE), M_Power);
		END_IF
	
	ELSE 
		; // cyclic calls of this method 
	END_IF
		
// ======================================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PreChecks" Id="{a15c8866-2f98-4ced-b6f6-199983ca239f}" FolderPath="Jog\">
      <Declaration><![CDATA[METHOD M_PreChecks : BOOL
VAR_INPUT
END_VAR
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF MCgvl.fbMCOperationMode.eModeActive = E_OperationMode.Manual THEN
	bAllowJogOperationMode:=TRUE;
//	fbMsgJogOperationMode.Release();
	ELSE
//	fbMsgJogOperationMode.SendMessage(TC_Events.TC_EventJog.OperationMode,'Change Operation Mode');
    bAllowJogOperationMode:=FALSE;	
END_IF

IF stJogParameters.lrJogAcceleration > crJogMinParameter AND stJogParameters.lrJogDeceleration > crJogMinParameter
AND stJogParameters.lrJogVelocity > crJogMinParameter THEN 
	bAllowJogParameters:=TRUE;
//	fbMsgJogParamters.Release();
	ELSE
//	fbMsgJogParamters.SendMessage(TC_Events.TC_EventJog.Parameters,'Check Acceleration, Decceleration and Velocity');
    bAllowJogParameters:=FALSE;	
END_IF

M_PreChecks:= bAllowJogOperationMode AND bAllowJogParameters;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{51d6a2a6-9807-4536-9654-46595267b114}" FolderPath="Reset\">
      <Declaration><![CDATA[METHOD M_Reset : HRESULT
VAR_INPUT
	bCommand : BOOL;
END_VAR

VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ======================================================================

	IF bCommand THEN
		IF F_SucceededHr(Reset.DoReset(bExecute:=TRUE), M_Reset) THEN
			bError:=FALSE;
		END_IF
	
	ELSIF NOT bCommand THEN		
		F_SucceededHr(Reset.DoReset(bExecute:=FALSE), M_Reset);
		
	ELSE 
		; // cyclic calls of this method 
	END_IF
		
// ======================================================================]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stop" Id="{18420e58-9aed-46cf-a9f7-42ea533154a2}" FolderPath="Stop\">
      <Declaration><![CDATA[METHOD M_Stop : HRESULT
VAR_INPUT
	bCommand : BOOL;
END_VAR

VAR
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// ======================================================================

	IF bCommand THEN
//		bMovePtpAxis := FALSE;
		F_SucceededHr(Stop.DoStop(bExecute:=TRUE), M_Stop);
	
	ELSIF NOT bCommand THEN
		F_SucceededHr(Stop.DoStop(bExecute:=FALSE), M_Stop);
		
	ELSE 
		; // cyclic calls of this method 
	END_IF
		
// ======================================================================]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_BaseAxis">
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="50" Count="5" />
      <LineId Id="35" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="94" Count="2" />
      <LineId Id="93" Count="0" />
      <LineId Id="143" Count="6" />
      <LineId Id="142" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseAxis.M_BaseFBError">
      <LineId Id="10" Count="2" />
      <LineId Id="19" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseAxis.M_Jog">
      <LineId Id="7" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="201" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="216" Count="0" />
      <LineId Id="199" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="188" Count="2" />
      <LineId Id="217" Count="2" />
      <LineId Id="169" Count="0" />
      <LineId Id="195" Count="2" />
      <LineId Id="191" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="192" Count="2" />
      <LineId Id="234" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="198" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseAxis.M_OperationLimits">
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="3" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseAxis.M_Power">
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="37" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseAxis.M_PreChecks">
      <LineId Id="125" Count="13" />
      <LineId Id="141" Count="3" />
      <LineId Id="119" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseAxis.M_Reset">
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_BaseAxis.M_Stop">
      <LineId Id="7" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>